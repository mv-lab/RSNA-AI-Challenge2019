Loading module for GNU compilers
GNU 6.4.0 is now loaded
Loading module for Miniconda
Miniconda 3 is now loaded
+ bash bin/train_pred005f0.sh
+ model=model005
+ gpu=0
+ fold=0
+ conf=./conf/model005.py
+ python -m src.cnn.main train ./conf/model005.py --fold 0 --gpu 0
/home/xum/.conda/envs/kaggler/lib/python3.7/site-packages/torch/optim/lr_scheduler.py:73: UserWarning: Seems like `optimizer.step()` has been overridden after learning rate scheduler initialization. Please, make sure to call `optimizer.step()` before `lr_scheduler.step()`. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
+ ep=1
+ tta=5
+ clip=1e-6
+ snapshot=./model/model005/fold0_ep1.pt
+ valid=./model/model005/fold0_ep1_valid_tta5.pkl
+ test=./model/model005/fold0_ep1_test_tta5.pkl
+ sub=./data/submission/model005_fold0_ep1_test_tta5.csv
+ python -m src.cnn.main test ./conf/model005.py --snapshot ./model/model005/fold0_ep1.pt --output ./model/model005/fold0_ep1_test_tta5.pkl --n-tta 5 --fold 0 --gpu 0
+ python -m src.postprocess.make_submission --input ./model/model005/fold0_ep1_test_tta5.pkl --output ./data/submission/model005_fold0_ep1_test_tta5.csv --clip 1e-6
+ kaggle competitions submit rsna-intracranial-hemorrhage-detection -m 'efficientnet-b7 on v100' -f ./data/submission/model005_fold0_ep1_test_tta5.csv
  0%|          | 0.00/20.7M [00:00<?, ?B/s]  0%|          | 8.00k/20.7M [00:00<24:21, 14.8kB/s]  0%|          | 48.0k/20.7M [00:00<17:31, 20.6kB/s]  0%|          | 80.0k/20.7M [00:00<12:52, 27.9kB/s]  1%|          | 160k/20.7M [00:01<09:13, 38.8kB/s]   2%|▏         | 368k/20.7M [00:01<06:29, 54.6kB/s]  4%|▍         | 872k/20.7M [00:01<04:28, 77.4kB/s]  6%|▌         | 1.28M/20.7M [00:03<03:36, 93.8kB/s]  9%|▉         | 1.89M/20.7M [00:04<02:28, 132kB/s]  16%|█▌        | 3.27M/20.7M [00:04<01:37, 188kB/s] 31%|███       | 6.31M/20.7M [00:06<00:58, 256kB/s] 49%|████▉     | 10.2M/20.7M [00:06<00:30, 363kB/s] 58%|█████▊    | 12.0M/20.7M [00:06<00:17, 511kB/s] 69%|██████▉   | 14.2M/20.7M [00:06<00:09, 717kB/s] 79%|███████▉  | 16.4M/20.7M [00:07<00:04, 999kB/s] 90%|█████████ | 18.6M/20.7M [00:07<00:01, 1.38MB/s]100%|██████████| 20.7M/20.7M [00:09<00:00, 2.32MB/s]
